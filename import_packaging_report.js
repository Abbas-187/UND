const fs = require('fs');
const path = require('path');
const csv = require('csv-parser');
const { Readable } = require('stream');
const admin = require('firebase-admin');

// Initialize Firebase admin SDK with service account
const serviceAccount = require('./undapp-119cf-firebase-adminsdk-fbsvc-d5df10b000.json');
admin.initializeApp({
  credential: admin.credential.cert(serviceAccount)
});
const db = admin.firestore();

// Path to CSV
const csvPath = path.join(__dirname, 'packaging_report 04.05.25.csv');

(async () => {
  try {
    const raw = fs.readFileSync(csvPath, 'utf-8');
    // Remove commented lines
    const filtered = raw
      .split(/\r?\n/)
      .filter(line => line.trim() && !line.trim().startsWith('//'))
      .join('\n');
    const stream = Readable.from(filtered);

    const batch = db.batch();
    let count = 0;

    stream.pipe(csv())
      .on('data', (row) => {
        const item = {
          sapCode: row['M. code']?.trim() || '',
          name: row['Material']?.trim() || '',
          category: row['Category']?.trim() || '',
          subCategory: row['Sub Category']?.trim() || '',
          location: row['Location']?.trim() || '',
          unit: 'pcs', // default unit
          quantity: Number(row['Balance']) || 0,
          minimumQuantity: Number(row['Min Stock ']) || 0,
          reorderPoint: Number(row['Reorder Point']) || 0,
          appItemId: '',  // to be generated by app
          lastUpdated: admin.firestore.Timestamp.now()
        };
        const docRef = db.collection('inventoryItems').doc();
        batch.set(docRef, item);
        count++;
        if (count % 500 === 0) {
          batch.commit();
        }
      })
      .on('end', async () => {
        await batch.commit();
        console.log(`Imported ${count} packaging items into Firestore.`);
        process.exit(0);
      });
  } catch (err) {
    console.error('Error importing CSV:', err);
    process.exit(1);
  }
})();