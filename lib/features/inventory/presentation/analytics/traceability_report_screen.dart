import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:intl/intl.dart';

import '../../domain/usecases/analytics/traceability_report_usecase.dart';

class TraceabilityReportScreen extends ConsumerStatefulWidget {
  const TraceabilityReportScreen({
    super.key,
    required this.itemId,
    this.batchLotNumber,
  });

  final String itemId;
  final String? batchLotNumber;

  @override
  ConsumerState<TraceabilityReportScreen> createState() =>
      _TraceabilityReportScreenState();
}

class _TraceabilityReportScreenState
    extends ConsumerState<TraceabilityReportScreen> {
  late Future<TraceabilityReport> _reportFuture;

  @override
  void initState() {
    super.initState();
    _loadReport();
  }

  void _loadReport() {
    final useCase = ref.read(traceabilityReportUseCaseProvider);
    _reportFuture = useCase.generateTraceabilityReport(
      itemId: widget.itemId,
      batchLotNumber: widget.batchLotNumber,
      generatedBy: 'system-user', // In practice, this would be the current user
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Traceability Report'),
        actions: [
          IconButton(
            icon: const Icon(Icons.refresh),
            onPressed: () {
              setState(() {
                _loadReport();
              });
            },
          ),
          IconButton(
            icon: const Icon(Icons.share),
            onPressed: _shareReport,
          ),
        ],
      ),
      body: FutureBuilder<TraceabilityReport>(
        future: _reportFuture,
        builder: (context, snapshot) {
          if (snapshot.connectionState == ConnectionState.waiting) {
            return const Center(child: CircularProgressIndicator());
          }

          if (snapshot.hasError) {
            return Center(
              child: Column(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  Icon(Icons.error, size: 64, color: Colors.red[300]),
                  const SizedBox(height: 16),
                  Text('Error loading report: ${snapshot.error}'),
                  const SizedBox(height: 16),
                  ElevatedButton(
                    onPressed: () {
                      setState(() {
                        _loadReport();
                      });
                    },
                    child: const Text('Retry'),
                  ),
                ],
              ),
            );
          }

          final report = snapshot.data!;
          return _buildReport(report);
        },
      ),
    );
  }

  Widget _buildReport(TraceabilityReport report) {
    return SingleChildScrollView(
      padding: const EdgeInsets.all(16),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          _buildReportHeader(report),
          const SizedBox(height: 24),
          _buildCurrentStatus(report),
          const SizedBox(height: 24),
          _buildSummary(report.summary),
          const SizedBox(height: 24),
          _buildTraceabilityTimeline(report.traceabilityRecords),
          const SizedBox(height: 24),
          _buildQualityHistory(report),
        ],
      ),
    );
  }

  Widget _buildReportHeader(TraceabilityReport report) {
    final formatter = DateFormat('MMM dd, yyyy HH:mm');

    return Card(
      child: Padding(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              'Traceability Report',
              style: Theme.of(context).textTheme.headlineSmall,
            ),
            const SizedBox(height: 16),
            Row(
              children: [
                Expanded(
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Text('Item: ${report.itemName}'),
                      Text('Item ID: ${report.itemId}'),
                      if (report.batchLotNumber != null)
                        Text('Batch/Lot: ${report.batchLotNumber}'),
                    ],
                  ),
                ),
                Expanded(
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Text(
                          'Generated: ${formatter.format(report.generatedAt)}'),
                      Text('Generated By: ${report.generatedBy}'),
                      Text('Current Location: ${report.currentLocation}'),
                    ],
                  ),
                ),
              ],
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildCurrentStatus(TraceabilityReport report) {
    return Card(
      child: Padding(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              'Current Status',
              style: Theme.of(context).textTheme.titleLarge,
            ),
            const SizedBox(height: 16),
            Row(
              children: [
                Expanded(
                  child: _buildStatusItem(
                    'Quantity',
                    '${report.currentQuantity}',
                    Icons.inventory,
                    Colors.blue,
                  ),
                ),
                Expanded(
                  child: _buildStatusItem(
                    'Quality Status',
                    report.currentQualityStatus,
                    Icons.verified,
                    _getQualityStatusColor(report.currentQualityStatus),
                  ),
                ),
                Expanded(
                  child: _buildStatusItem(
                    'Location',
                    report.currentLocation,
                    Icons.location_on,
                    Colors.green,
                  ),
                ),
              ],
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildStatusItem(
      String title, String value, IconData icon, Color color) {
    return Container(
      padding: const EdgeInsets.all(12),
      decoration: BoxDecoration(
        color: color.withOpacity(0.1),
        borderRadius: BorderRadius.circular(8),
      ),
      child: Column(
        children: [
          Icon(icon, color: color, size: 32),
          const SizedBox(height: 8),
          Text(
            value,
            style: TextStyle(
              fontWeight: FontWeight.bold,
              color: color,
            ),
          ),
          Text(
            title,
            style: TextStyle(
              fontSize: 12,
              color: Colors.grey[600],
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildSummary(TraceabilitySummary summary) {
    return Card(
      child: Padding(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              'Summary',
              style: Theme.of(context).textTheme.titleLarge,
            ),
            const SizedBox(height: 16),
            GridView.count(
              shrinkWrap: true,
              physics: const NeverScrollableScrollPhysics(),
              crossAxisCount: 3,
              childAspectRatio: 2,
              crossAxisSpacing: 16,
              mainAxisSpacing: 16,
              children: [
                _buildSummaryCard('Total Movements',
                    '${summary.totalMovements}', Icons.swap_horiz),
                _buildSummaryCard('Days in Inventory',
                    '${summary.daysInInventory}', Icons.schedule),
                _buildSummaryCard('Locations Visited',
                    '${summary.locationsVisited.length}', Icons.location_on),
                _buildSummaryCard('Total Inbound', '${summary.totalInbound}',
                    Icons.arrow_downward),
                _buildSummaryCard('Total Outbound', '${summary.totalOutbound}',
                    Icons.arrow_upward),
                _buildSummaryCard('Quality Changes',
                    '${summary.qualityStatusChanges}', Icons.change_circle),
              ],
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildSummaryCard(String title, String value, IconData icon) {
    return Container(
      padding: const EdgeInsets.all(12),
      decoration: BoxDecoration(
        border: Border.all(color: Colors.grey[300]!),
        borderRadius: BorderRadius.circular(8),
      ),
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          Icon(icon, color: Colors.blue, size: 24),
          const SizedBox(height: 4),
          Text(
            value,
            style: const TextStyle(
              fontWeight: FontWeight.bold,
              fontSize: 16,
            ),
          ),
          Text(
            title,
            style: TextStyle(
              fontSize: 10,
              color: Colors.grey[600],
            ),
            textAlign: TextAlign.center,
          ),
        ],
      ),
    );
  }

  Widget _buildTraceabilityTimeline(List<TraceabilityRecord> records) {
    return Card(
      child: Padding(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              'Movement Timeline',
              style: Theme.of(context).textTheme.titleLarge,
            ),
            const SizedBox(height: 16),
            ListView.builder(
              shrinkWrap: true,
              physics: const NeverScrollableScrollPhysics(),
              itemCount: records.length,
              itemBuilder: (context, index) {
                final record = records[index];
                return _buildTimelineItem(record, index == records.length - 1);
              },
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildTimelineItem(TraceabilityRecord record, bool isLast) {
    final formatter = DateFormat('MMM dd, yyyy HH:mm');

    return Row(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Column(
          children: [
            Container(
              width: 12,
              height: 12,
              decoration: BoxDecoration(
                color: record.isInbound ? Colors.green : Colors.red,
                shape: BoxShape.circle,
              ),
            ),
            if (!isLast)
              Container(
                width: 2,
                height: 40,
                color: Colors.grey[300],
              ),
          ],
        ),
        const SizedBox(width: 16),
        Expanded(
          child: Padding(
            padding: const EdgeInsets.only(bottom: 16),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Row(
                  children: [
                    Text(
                      record.movementType.name.toUpperCase(),
                      style: const TextStyle(fontWeight: FontWeight.bold),
                    ),
                    const Spacer(),
                    Text(
                      formatter.format(record.movementDate),
                      style: TextStyle(
                        fontSize: 12,
                        color: Colors.grey[600],
                      ),
                    ),
                  ],
                ),
                const SizedBox(height: 4),
                Text(
                    'Quantity: ${record.quantity > 0 ? '+' : ''}${record.quantity}'),
                Text('Running Balance: ${record.runningBalance}'),
                Text('Location: ${record.location}'),
                if (record.notes.isNotEmpty) Text('Notes: ${record.notes}'),
              ],
            ),
          ),
        ),
      ],
    );
  }

  Widget _buildQualityHistory(TraceabilityReport report) {
    final qualityChanges = report.qualityChanges;

    if (qualityChanges.isEmpty) {
      return const SizedBox.shrink();
    }

    return Card(
      child: Padding(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              'Quality Status History',
              style: Theme.of(context).textTheme.titleLarge,
            ),
            const SizedBox(height: 16),
            ListView.builder(
              shrinkWrap: true,
              physics: const NeverScrollableScrollPhysics(),
              itemCount: qualityChanges.length,
              itemBuilder: (context, index) {
                final change = qualityChanges[index];
                return ListTile(
                  leading: Icon(
                    Icons.change_circle,
                    color: _getQualityStatusColor(
                        change.qualityStatus ?? 'UNKNOWN'),
                  ),
                  title: Text(change.qualityStatus ?? 'UNKNOWN'),
                  subtitle: Text(DateFormat('MMM dd, yyyy HH:mm')
                      .format(change.movementDate)),
                  trailing: Text(change.employeeId),
                );
              },
            ),
          ],
        ),
      ),
    );
  }

  Color _getQualityStatusColor(String status) {
    switch (status.toUpperCase()) {
      case 'AVAILABLE':
      case 'EXCELLENT':
        return Colors.green;
      case 'GOOD':
      case 'ACCEPTABLE':
        return Colors.blue;
      case 'QUARANTINE':
      case 'HOLD':
        return Colors.orange;
      case 'REJECTED':
      case 'EXPIRED':
        return Colors.red;
      default:
        return Colors.grey;
    }
  }

  void _shareReport() {
    // TODO: Implement report sharing functionality
    ScaffoldMessenger.of(context).showSnackBar(
      const SnackBar(content: Text('Report sharing functionality coming soon')),
    );
  }
}
