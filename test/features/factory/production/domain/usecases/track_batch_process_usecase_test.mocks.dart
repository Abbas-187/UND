// Mocks generated by Mockito 5.4.5 from annotations
// in und_app/test/features/factory/production/domain/usecases/track_batch_process_usecase_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:und_app/core/exceptions/result.dart' as _i2;
import 'package:und_app/features/factory/production/domain/models/production_batch_model.dart'
    as _i5;
import 'package:und_app/features/factory/production/domain/repositories/production_batch_repository.dart'
    as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeResult_0<T> extends _i1.SmartFake implements _i2.Result<T> {
  _FakeResult_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [ProductionBatchRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockProductionBatchRepository extends _i1.Mock
    implements _i3.ProductionBatchRepository {
  MockProductionBatchRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Result<_i5.ProductionBatchModel>> createBatch(
    _i5.ProductionBatchModel? batch,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#createBatch, [batch]),
            returnValue: _i4.Future<_i2.Result<_i5.ProductionBatchModel>>.value(
              _FakeResult_0<_i5.ProductionBatchModel>(
                this,
                Invocation.method(#createBatch, [batch]),
              ),
            ),
          )
          as _i4.Future<_i2.Result<_i5.ProductionBatchModel>>);

  @override
  _i4.Future<_i2.Result<_i5.ProductionBatchModel>> getBatchById(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#getBatchById, [id]),
            returnValue: _i4.Future<_i2.Result<_i5.ProductionBatchModel>>.value(
              _FakeResult_0<_i5.ProductionBatchModel>(
                this,
                Invocation.method(#getBatchById, [id]),
              ),
            ),
          )
          as _i4.Future<_i2.Result<_i5.ProductionBatchModel>>);

  @override
  _i4.Future<_i2.Result<List<_i5.ProductionBatchModel>>>
  getBatchesByExecutionId(String? executionId) =>
      (super.noSuchMethod(
            Invocation.method(#getBatchesByExecutionId, [executionId]),
            returnValue:
                _i4.Future<_i2.Result<List<_i5.ProductionBatchModel>>>.value(
                  _FakeResult_0<List<_i5.ProductionBatchModel>>(
                    this,
                    Invocation.method(#getBatchesByExecutionId, [executionId]),
                  ),
                ),
          )
          as _i4.Future<_i2.Result<List<_i5.ProductionBatchModel>>>);

  @override
  _i4.Future<_i2.Result<_i5.ProductionBatchModel>> updateBatch(
    _i5.ProductionBatchModel? batch,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#updateBatch, [batch]),
            returnValue: _i4.Future<_i2.Result<_i5.ProductionBatchModel>>.value(
              _FakeResult_0<_i5.ProductionBatchModel>(
                this,
                Invocation.method(#updateBatch, [batch]),
              ),
            ),
          )
          as _i4.Future<_i2.Result<_i5.ProductionBatchModel>>);

  @override
  _i4.Future<_i2.Result<_i5.ProductionBatchModel>> updateBatchStatus(
    String? id,
    _i5.BatchStatus? status,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#updateBatchStatus, [id, status]),
            returnValue: _i4.Future<_i2.Result<_i5.ProductionBatchModel>>.value(
              _FakeResult_0<_i5.ProductionBatchModel>(
                this,
                Invocation.method(#updateBatchStatus, [id, status]),
              ),
            ),
          )
          as _i4.Future<_i2.Result<_i5.ProductionBatchModel>>);

  @override
  _i4.Future<_i2.Result<_i5.ProductionBatchModel>> startBatch(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#startBatch, [id]),
            returnValue: _i4.Future<_i2.Result<_i5.ProductionBatchModel>>.value(
              _FakeResult_0<_i5.ProductionBatchModel>(
                this,
                Invocation.method(#startBatch, [id]),
              ),
            ),
          )
          as _i4.Future<_i2.Result<_i5.ProductionBatchModel>>);

  @override
  _i4.Future<_i2.Result<_i5.ProductionBatchModel>> completeBatch(
    String? id,
    double? actualQuantity,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#completeBatch, [id, actualQuantity]),
            returnValue: _i4.Future<_i2.Result<_i5.ProductionBatchModel>>.value(
              _FakeResult_0<_i5.ProductionBatchModel>(
                this,
                Invocation.method(#completeBatch, [id, actualQuantity]),
              ),
            ),
          )
          as _i4.Future<_i2.Result<_i5.ProductionBatchModel>>);

  @override
  _i4.Future<_i2.Result<_i5.ProductionBatchModel>> failBatch(
    String? id,
    String? reason,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#failBatch, [id, reason]),
            returnValue: _i4.Future<_i2.Result<_i5.ProductionBatchModel>>.value(
              _FakeResult_0<_i5.ProductionBatchModel>(
                this,
                Invocation.method(#failBatch, [id, reason]),
              ),
            ),
          )
          as _i4.Future<_i2.Result<_i5.ProductionBatchModel>>);

  @override
  _i4.Future<_i2.Result<_i5.ProductionBatchModel>> updateBatchParameters(
    String? id,
    Map<String, dynamic>? parameters,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#updateBatchParameters, [id, parameters]),
            returnValue: _i4.Future<_i2.Result<_i5.ProductionBatchModel>>.value(
              _FakeResult_0<_i5.ProductionBatchModel>(
                this,
                Invocation.method(#updateBatchParameters, [id, parameters]),
              ),
            ),
          )
          as _i4.Future<_i2.Result<_i5.ProductionBatchModel>>);

  @override
  _i4.Stream<_i5.ProductionBatchModel> watchBatch(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#watchBatch, [id]),
            returnValue: _i4.Stream<_i5.ProductionBatchModel>.empty(),
          )
          as _i4.Stream<_i5.ProductionBatchModel>);

  @override
  _i4.Stream<List<_i5.ProductionBatchModel>> watchBatchesByExecutionId(
    String? executionId,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#watchBatchesByExecutionId, [executionId]),
            returnValue: _i4.Stream<List<_i5.ProductionBatchModel>>.empty(),
          )
          as _i4.Stream<List<_i5.ProductionBatchModel>>);

  @override
  _i4.Future<_i2.Result<List<_i5.ProductionBatchModel>>> getBatchesByDateRange(
    DateTime? startDate,
    DateTime? endDate,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getBatchesByDateRange, [startDate, endDate]),
            returnValue:
                _i4.Future<_i2.Result<List<_i5.ProductionBatchModel>>>.value(
                  _FakeResult_0<List<_i5.ProductionBatchModel>>(
                    this,
                    Invocation.method(#getBatchesByDateRange, [
                      startDate,
                      endDate,
                    ]),
                  ),
                ),
          )
          as _i4.Future<_i2.Result<List<_i5.ProductionBatchModel>>>);

  @override
  _i4.Future<_i2.Result<List<_i5.ProductionBatchModel>>> getBatchesByProductId(
    String? productId,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getBatchesByProductId, [productId]),
            returnValue:
                _i4.Future<_i2.Result<List<_i5.ProductionBatchModel>>>.value(
                  _FakeResult_0<List<_i5.ProductionBatchModel>>(
                    this,
                    Invocation.method(#getBatchesByProductId, [productId]),
                  ),
                ),
          )
          as _i4.Future<_i2.Result<List<_i5.ProductionBatchModel>>>);

  @override
  _i4.Future<_i2.Result<void>> deleteBatch(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#deleteBatch, [id]),
            returnValue: _i4.Future<_i2.Result<void>>.value(
              _FakeResult_0<void>(this, Invocation.method(#deleteBatch, [id])),
            ),
          )
          as _i4.Future<_i2.Result<void>>);
}
